{
    "conflicts": [
        {
            "id": "81ceccc7-4cd6-4767-b95d-fd0d9b95dfa5",
            "currentContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse App\\Filament\\Resources\\Panel\\MaintenanceDepartmentResource\\Widgets\\Overview;\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse App\\Models\\MaintenanceDepartment;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse App\\Filament\\Resources\\Panel\\MaintenanceDepartmentResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\MaintenanceDepartmentResource\\RelationManagers;\n\nclass MaintenanceDepartmentResource extends Resource\n{\n    protected static ?string $model = MaintenanceDepartment::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-wrench-screwdriver';\n\n    protected static ?int $navigationSort = 7;\n\n    protected static ?string $navigationGroup = 'Maintenance';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.maintenanceDepartments.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.maintenanceDepartments.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.maintenanceDepartments.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    TextInput::make('name')\n                        ->required()\n                        ->string()\n                        ->autofocus(),\n\n                    TextInput::make('location')\n                        ->required()\n                        ->string(),\n\n                    Select::make('type')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false)\n                        ->options(options: [\n                            'internal' => 'Internal',\n                            'external' => 'External',\n                        ]),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                TextColumn::make('name')->searchable(),\n\n                TextColumn::make('location'),\n\n                TextColumn::make('type')->badge()\n                ->colors([\n                    'success' => 'internal',\n                    'danger' => 'external',\n                ]),\n                TextColumn::make('users.count')->label('Emplyess Count')->default(0)->badge()\n                    ->getStateUsing(function ($record) {\n                        return $record->users->count();\n                    }),\n                TextColumn::make('items.count')->default(0)->label('Items Count')->badge()\n                    ->getStateUsing(function ($record) {\n                        return $record->items->count();\n                    }),\n            ])\n            ->filters([])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [RelationManagers\\MaintenanceItemsRelationManager::class];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListMaintenanceDepartments::route('/'),\n            'create' => Pages\\CreateMaintenanceDepartment::route('/create'),\n            'view' => Pages\\ViewMaintenanceDepartment::route('/{record}'),\n            'edit' => Pages\\EditMaintenanceDepartment::route('/{record}/edit'),\n        ];\n    }\n    public static function getNavigationBadge(): ?string\n    {\n        return static::getModel()::count();\n    }\n\n    public static function getWidgets(): array\n    {\n        return [\n            Overview::class,\n        ];\n    }\n}\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse App\\Models\\MaintenanceDepartment;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse App\\Filament\\Resources\\Panel\\MaintenanceDepartmentResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\MaintenanceDepartmentResource\\RelationManagers;\n\nclass MaintenanceDepartmentResource extends Resource\n{\n    protected static ?string $model = MaintenanceDepartment::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Admin';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.maintenanceDepartments.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.maintenanceDepartments.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.maintenanceDepartments.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    TextInput::make('name')\n                        ->required()\n                        ->string()\n                        ->autofocus(),\n\n                    TextInput::make('location')\n                        ->required()\n                        ->string(),\n\n                    Select::make('type')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false)\n                        ->options([\n                            'internal' => 'Internal',\n                            'external' => 'External',\n                        ]),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                TextColumn::make('name'),\n\n                TextColumn::make('location'),\n\n                TextColumn::make('type'),\n            ])\n            ->filters([])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [\n            RelationManagers\\MaintenanceItemsRelationManager::class,\n            RelationManagers\\UsersRelationManager::class,\n        ];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListMaintenanceDepartments::route('/'),\n            'create' => Pages\\CreateMaintenanceDepartment::route('/create'),\n            'view' => Pages\\ViewMaintenanceDepartment::route('/{record}'),\n            'edit' => Pages\\EditMaintenanceDepartment::route('/{record}/edit'),\n        ];\n    }\n}\n"
        }
    ]
}