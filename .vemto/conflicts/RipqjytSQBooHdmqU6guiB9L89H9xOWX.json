{
    "conflicts": [
        {
            "id": "7e385c6f-4639-4383-911a-b5148225a878",
            "currentContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse App\\Models\\User;\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse App\\Models\\Item;\nuse Filament\\Tables\\Actions\\Action;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Tables\\Enums\\FiltersLayout;\nuse Filament\\Tables\\Filters\\SelectFilter;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse App\\Filament\\Resources\\Panel\\ItemResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\ItemResource\\RelationManagers;\n\nclass ItemResource extends Resource\n{\n    protected static ?string $model = Item::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-archive-box';\n\n    protected static ?int $navigationSort = 4;\n\n    protected static ?string $navigationGroup = 'Stock Management';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.items.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.items.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.items.collectionTitle');\n    }\n\n    public static function getEloquentQuery(): Builder\n    {\n        return static::getModel()::query()->where('status','in_where_house');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    TextInput::make('name')\n                        ->required()\n                        ->string()\n                        ->autofocus(),\n\n                    Select::make('status')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false)\n                        ->options([\n                            'in_where_house' => 'In where house',\n                            'asset' => 'Asset',\n                            'in_maintenance' => 'In maintenance',\n                            'damaged' => 'Damaged',\n                        ]),\n\n                    Select::make('user_id')\n                        ->required()\n                        ->relationship('user', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('warehouse_id')\n                        ->required()\n                        ->relationship('warehouse', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                TextColumn::make('barcode')->searchable(),\n                ImageColumn::make('barcode_image'),\n                TextColumn::make('name')->searchable(),\n\n                TextColumn::make('status')\n                ->badge()\n                ->color(\n                    fn(string $state): string => match ($state) {\n                        'in_maintenance' => 'info',\n                        'in_where_house' => 'success',\n                        'damaged' => 'danger',\n                    }\n                ),\n\n\n                TextColumn::make('warehouse.name'),\n            ])\n            ->filters([\n                \n\n                SelectFilter::make('warehouse_id')\n                    ->relationship('warehouse', 'name'),\n\n            ])\n\n            ->actions([\n                // Tables\\Actions\\EditAction::make(),\n                // Tables\\Actions\\ViewAction::make(),\n                Action::make('assign_to_user')\n                ->button()\n                ->color('success')\n                    ->icon('heroicon-m-user-circle')\n                    ->form(\n                        [\n                            Select::make('user_id')\n                            ->required()\n                            ->searchable()\n                            ->options(function () {\n                                return User::all()\n                                    ->pluck('name', 'id');\n                            })\n                            ->placeholder('Select a User')\n                        ]\n                    )\n                    ->action(function ($record, array $data) {\n                        // Update the status when the action is triggered\n                        $record->status = 'asset';\n                        $record->user_id = $data['user_id'];\n                        $record->save();\n                    })\n                    ->tooltip('Assign to user'),\n                    Action::make('send_to_maintenance_departments')\n                    ->iconButton()\n                    ->icon('heroicon-m-wrench-screwdriver')\n                    ->tooltip('Send to Maintenance Departments'),\n                    // Action::make('damged')\n                    // ->iconButton()\n                    // ->color('danger')\n                    // ->icon('heroicon-m-trash')\n                    // ->tooltip('Mark as Damged')\n            ])\n            ->bulkActions([\n                // Tables\\Actions\\BulkActionGroup::make([\n                //     Tables\\Actions\\DeleteBulkAction::make(),\n                // ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [RelationManagers\\MaintenanceItemsRelationManager::class];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListItems::route('/'),\n            'create' => Pages\\CreateItem::route('/create'),\n            'view' => Pages\\ViewItem::route('/{record}'),\n            'edit' => Pages\\EditItem::route('/{record}/edit'),\n        ];\n    }\n    public static function getNavigationBadge(): ?string\n    {\n        return static::getModel()::query()->where('status','in_where_house')->count();\n    }\n}\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse App\\Models\\Item;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse App\\Filament\\Resources\\Panel\\ItemResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\ItemResource\\RelationManagers;\n\nclass ItemResource extends Resource\n{\n    protected static ?string $model = Item::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Admin';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.items.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.items.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.items.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    TextInput::make('name')\n                        ->required()\n                        ->string()\n                        ->autofocus(),\n\n                    Select::make('status')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false)\n                        ->options([\n                            'in_where_house' => 'In where house',\n                            'asset' => 'Asset',\n                            'in_maintenance' => 'In maintenance',\n                            'damaged' => 'Damaged',\n                        ]),\n\n                    Select::make('user_id')\n                        ->required()\n                        ->relationship('user', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('warehouse_id')\n                        ->required()\n                        ->relationship('warehouse', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                TextColumn::make('name'),\n\n                TextColumn::make('status'),\n\n                TextColumn::make('user.name'),\n\n                TextColumn::make('warehouse.name'),\n            ])\n            ->filters([])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [RelationManagers\\MaintenanceItemsRelationManager::class];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListItems::route('/'),\n            'create' => Pages\\CreateItem::route('/create'),\n            'view' => Pages\\ViewItem::route('/{record}'),\n            'edit' => Pages\\EditItem::route('/{record}/edit'),\n        ];\n    }\n}\n"
        }
    ]
}